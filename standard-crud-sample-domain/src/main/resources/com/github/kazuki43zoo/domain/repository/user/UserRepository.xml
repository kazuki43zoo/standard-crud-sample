<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.kazuki43zoo.domain.repository.user.UserRepository">

    <insert id="create" parameterType="User">

        <selectKey keyProperty="userUuid" resultType="string" order="BEFORE">
            SELECT RANDOM_UUID()
        </selectKey>

        INSERT INTO t_user (
            user_uuid
            ,name
            ,date_of_birth
            ,address
            ,tel
            ,email
            ,status
            ,version
        )
        VALUES (
            #{userUuid}
            ,#{name}
            ,#{dateOfBirth}
            ,#{address}
            ,#{tel}
            ,#{email}
            ,#{status}
            ,#{version}
        )
    </insert>

    <insert id="createCredential" parameterType="User">
        INSERT INTO t_user_credential (
            user_uuid
            ,user_id
            ,password
            ,status
            ,last_update_at
            ,version
        )
        VALUES (
            #{userUuid}
            ,#{credential.userId}
            ,#{credential.password}
            ,#{credential.status}
            ,#{credential.lastUpdateAt}
            ,#{credential.version}
        )
    </insert>

    <insert id="createRoles">
        INSERT INTO t_user_roles (
            user_uuid
            ,role
        )
        VALUES
        <foreach collection="roles" item="userRole" separator="," index="i">
            (
                #{userUuid}
                ,#{userRole.role}
            )
        </foreach>

    </insert>

    <update id="update" parameterType="User">
        UPDATE
            t_user
        SET
            name = #{name}
            ,date_of_birth = #{dateOfBirth}
            ,address = #{address}
            ,tel = #{tel}
            ,email = #{email}
            ,status = #{status}
            ,version = version + 1
        WHERE
            user_uuid = #{userUuid}
        AND
            version = #{version}
    </update>

    <update id="updateCredential" parameterType="User">
        UPDATE
            t_user_credential
        SET
            user_id = #{credential.userId}
            ,password = #{credential.password}
            ,status = #{credential.status}
            ,last_update_at = #{credential.lastUpdateAt}
            ,version = version + 1
        WHERE
            user_uuid = #{userUuid}
        AND
            version = #{credential.version}
    </update>

    <delete id="deleteRoles">
        DELETE FROM
            t_user_roles
        WHERE
            user_uuid = #{userUuid}
    </delete>

    <resultMap id="userResultMap" type="User">
        <id property="userUuid" column="user_uuid" />
        <result property="name" column="name" />
        <result property="dateOfBirth" column="date_of_birth" />
        <result property="address" column="address" />
        <result property="tel" column="tel" />
        <result property="email" column="email" />
        <result property="status" column="status" />
        <result property="version" column="version" />
        <association property="credential" javaType="UserCredential" columnPrefix="credential_">
            <id property="userUuid" column="user_uuid" />
            <result property="userId" column="user_id" />
            <result property="password" column="password" />
            <result property="status" column="status" />
            <result property="lastUpdateAt" column="last_update_at" />
            <result property="version" column="version" />
        </association>
        <collection property="roles" javaType="list" ofType="UserRole" columnPrefix="roles_">
            <id property="userUuid" column="user_uuid" />
            <id property="role" column="role" />
        </collection>
    </resultMap>

    <sql id="whereForFindByCriteria">
        <where>
            <if test="criteria.userId != null">
                <bind name="escapedUserId"
                      value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toStartingWithCondition(criteria.userId)"/>
                AND uc.user_id LIKE #{escapedUserId} ESCAPE '~'
            </if>
            <if test="criteria.name != null">
                <bind name="escapedName"
                      value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(criteria.name)"/>
                AND u.name LIKE #{escapedName} ESCAPE '~'
            </if>
            <if test="criteria.dateOfBirth != null">
                AND u.date_of_birth = #{criteria.dateOfBirth}
            </if>
            <if test="criteria.address != null">
                <bind name="escapedAddress"
                      value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toContainingCondition(criteria.address)"/>
                AND u.address LIKE #{escapedAddress} ESCAPE '~'
            </if>
            <if test="criteria.tel != null">
                <bind name="escapedTel"
                      value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toStartingWithCondition(criteria.tel)"/>
                AND u.tel LIKE #{escapedTel} ESCAPE '~'
            </if>
            <if test="criteria.email != null">
                <bind name="escapedEmail"
                      value="@org.terasoluna.gfw.common.query.QueryEscapeUtils@toStartingWithCondition(criteria.email)"/>
                AND u.email LIKE #{escapedEmail} ESCAPE '~'
            </if>
            <if test="criteria.statusTargets != null">
                <foreach collection="criteria.statusTargets" item="status"
                         open="AND u.status IN(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="countByCriteria" resultType="long">
        SELECT
            COUNT(u.*)
        FROM
            t_user u
        INNER JOIN
            t_user_credential uc ON uc.user_uuid = u.user_uuid
        <include refid="whereForFindByCriteria"/>
    </select>

    <select id="findPageByCriteria" resultMap="userResultMap">
        SELECT
            u.user_uuid
            ,u.name
            ,u.date_of_birth
            ,u.address
            ,u.tel
            ,u.email
            ,u.status
            ,u.version
            ,uc.user_uuid AS "credential_user_uuid"
            ,uc.user_id AS "credential_user_id"
        FROM
            t_user u
        INNER JOIN
            t_user_credential uc ON uc.user_uuid = u.user_uuid
        <include refid="whereForFindByCriteria"/>
        ORDER BY
            u.name
        LIMIT
            #{pageable.pageSize}
        OFFSET
            #{pageable.offset}
    </select>

    <select id="findOne" resultMap="userResultMap">
        SELECT
            u.user_uuid
            ,u.name
            ,u.date_of_birth
            ,u.address
            ,u.tel
            ,u.email
            ,u.status
            ,u.version
            ,uc.user_uuid AS "credential_user_uuid"
            ,uc.user_id AS "credential_user_id"
            ,uc.password AS "credential_password"
            ,uc.status AS "credential_status"
            ,uc.last_update_at AS "credential_last_update_at"
            ,uc.version AS "credential_version"
            ,ur.user_uuid AS "roles_user_uuid"
            ,ur.role AS "roles_role"
        FROM
            t_user u
        INNER JOIN
            t_user_credential uc ON uc.user_uuid = u.user_uuid
        INNER JOIN
            t_user_roles ur ON ur.user_uuid = u.user_uuid
        WHERE
            u.user_uuid = #{userUuid}
    </select>

    <select id="existsByUserId" resultType="boolean">
        SELECT
            COUNT(*)
        FROM
            t_user_credential
        WHERE
            user_id = #{userId}
    </select>

    <select id="existsByUserIdAndNotUserUuid" resultType="boolean">
        SELECT
            COUNT(*)
        FROM
            t_user_credential
        WHERE
            user_id = #{userId}
        AND
            user_uuid != #{userUuid}
    </select>

</mapper>